---
import BlogCard from "@/components/BlogCard.astro";
import FeaturedBlogPostCard from "@/components/FeaturedBlogPostCard.astro";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { markdownify } from "@/lib/utils/textConverter";
import PageHeader from "@/partials/PageHeader.astro";
import { getEntry } from "astro:content";

const BLOG_FOLDER = "blog";
const postIndex = (await getEntry(BLOG_FOLDER, "-index")).data;
const pageHeaderIndexData = postIndex.page_header;
const readMoreIndexData = postIndex.read_more_blogs;
const posts = await getSinglePage(BLOG_FOLDER);
let sortedPosts = sortByDate(posts);
const allUniqueCategories = await getTaxonomy(BLOG_FOLDER, "categories");
---

<Base
  title={postIndex.title}
  meta_title={postIndex.meta_title}
  image={postIndex.image}
  description={postIndex.description}
>
  <PageHeader title={pageHeaderIndexData?.title} subtitle={pageHeaderIndexData?.subtitle} />

  <section class="section">
    <div class="container">
      <!--Featured Blog Card-->
      <FeaturedBlogPostCard mostRecentPost={sortedPosts[0]} />
    </div>
  </section>

  {
    readMoreIndexData && (
      <section class="section">
        <div class="container">
          <div class="section-intro text-center">
            {readMoreIndexData.title && <h3 class="title !text-h3" set:html={markdownify(readMoreIndexData.title)} />}

            {readMoreIndexData.subtitle && (
              <p class="subtitle lg:col-6 mx-auto" set:html={markdownify(readMoreIndexData.subtitle)} />
            )}
          </div>

          <div class="section-content">
            <ul class="px-10 flex flex-wrap justify-center items-center gap-2 mb-14">
              <li>
                <a class="blog-category-item active">All Categories</a>
              </li>
              {allUniqueCategories &&
                allUniqueCategories.map((category) => (
                  <li>
                    <a class="blog-category-item " href={"/categories/" + category}>
                      {category}
                    </a>
                  </li>
                ))}
            </ul>

            <div class="grid md:grid-cols-2 gap-8">
              {sortedPosts.map((post, index) => {
                const aosDelay = 100 * (index % 2);
                return <BlogCard data={post} aosDelay={aosDelay} />;
              })}
            </div>
          </div>
        </div>
      </section>
    )
  }
</Base>
